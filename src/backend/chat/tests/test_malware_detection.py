"""Test malware detection callback."""

from django.core.files.base import ContentFile
from django.core.files.storage import default_storage

import pytest
from lasuite.malware_detection.enums import ReportStatus

from core.file_upload.enums import AttachmentStatus
from core.file_upload.malware_detection import malware_detection_callback

from chat.factories import ChatConversationAttachmentFactory

pytestmark = pytest.mark.django_db


@pytest.fixture(name="safe_file")
def fixture_safe_file():
    """Create a safe file."""
    file_path = "test.txt"
    default_storage.save(file_path, ContentFile("test"))
    yield file_path
    default_storage.delete(file_path)


@pytest.fixture(name="unsafe_file")
def fixture_unsafe_file():
    """Create an unsafe file."""
    file_path = "unsafe.txt"
    default_storage.save(file_path, ContentFile("test"))
    yield file_path
    default_storage.delete(file_path)


def test_malware_detection_callback_safe_status(safe_file):
    """Test malware detection callback with safe status."""

    attachment = ChatConversationAttachmentFactory(key=safe_file)

    malware_detection_callback(
        safe_file,
        ReportStatus.SAFE,
        error_info={},
        safe_callback="chat.malware_detection.conversation_safe_attachment_callback",
        unknown_callback="chat.malware_detection.unknown_attachment_callback",
        unsafe_callback="chat.malware_detection.conversation_unsafe_attachment_callback",
        conversation_id=attachment.conversation.pk,
    )

    assert default_storage.exists(safe_file)
    attachment.refresh_from_db()
    assert attachment.upload_state == AttachmentStatus.READY


def test_malware_detection_callback_unsafe_status(unsafe_file):
    """Test malware detection callback with unsafe status."""

    attachment = ChatConversationAttachmentFactory(key=unsafe_file)

    malware_detection_callback(
        unsafe_file,
        ReportStatus.UNSAFE,
        error_info={"error": "test", "error_code": 4001},
        safe_callback="chat.malware_detection.conversation_safe_attachment_callback",
        unknown_callback="chat.malware_detection.unknown_attachment_callback",
        unsafe_callback="chat.malware_detection.conversation_unsafe_attachment_callback",
        conversation_id=attachment.conversation.pk,
    )

    assert default_storage.exists(unsafe_file)
    attachment.refresh_from_db()
    assert attachment.upload_state == AttachmentStatus.SUSPICIOUS


def test_malware_detection_callback_unknown_status(unsafe_file):
    """Test malware detection callback with unknown status."""

    attachment = ChatConversationAttachmentFactory(key=unsafe_file)

    malware_detection_callback(
        unsafe_file,
        ReportStatus.UNKNOWN,
        error_info={"error": "test", "error_code": 4001},
        safe_callback="chat.malware_detection.conversation_safe_attachment_callback",
        unknown_callback="chat.malware_detection.unknown_attachment_callback",
        unsafe_callback="chat.malware_detection.conversation_unsafe_attachment_callback",
        conversation_id=attachment.conversation.pk,
    )

    assert default_storage.exists(unsafe_file)
    attachment.refresh_from_db()
    assert attachment.upload_state == AttachmentStatus.SUSPICIOUS


def test_malware_detection_callback_unknown_status_too_large(unsafe_file):
    """Test malware detection callback with unknown status and error 413."""

    attachment = ChatConversationAttachmentFactory(key=unsafe_file)

    malware_detection_callback(
        unsafe_file,
        ReportStatus.UNKNOWN,
        error_info={"error": "toooooo big", "error_code": 413},
        safe_callback="chat.malware_detection.conversation_safe_attachment_callback",
        unknown_callback="chat.malware_detection.unknown_attachment_callback",
        unsafe_callback="chat.malware_detection.conversation_unsafe_attachment_callback",
        conversation_id=attachment.conversation.pk,
    )

    assert default_storage.exists(unsafe_file)
    attachment.refresh_from_db()
    assert attachment.upload_state == AttachmentStatus.FILE_TOO_LARGE_TO_ANALYZE
