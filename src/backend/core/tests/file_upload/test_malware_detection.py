"""Test malware detection callback."""

from unittest.mock import Mock, patch

from django.core.files.base import ContentFile
from django.core.files.storage import default_storage

import pytest
from lasuite.malware_detection.enums import ReportStatus

from core.file_upload.malware_detection import malware_detection_callback

pytestmark = pytest.mark.django_db


@pytest.fixture(name="safe_file")
def fixture_safe_file():
    """Create a safe file."""
    file_path = "test.txt"
    default_storage.save(file_path, ContentFile("test"))
    yield file_path
    default_storage.delete(file_path)


@pytest.fixture(name="unsafe_file")
def fixture_unsafe_file():
    """Create an unsafe file."""
    file_path = "unsafe.txt"
    default_storage.save(file_path, ContentFile("test"))
    yield file_path
    default_storage.delete(file_path)


def test_malware_detection_callback_safe_status(safe_file):
    """Test malware detection callback with safe status."""
    mock_unsafe_callback = Mock()

    with patch("core.file_upload.malware_detection.import_string") as mock_import:
        mock_import.return_value = mock_unsafe_callback

        malware_detection_callback(
            safe_file,
            ReportStatus.SAFE,
            error_info={},
            safe_callback="some.module.safe_callback_function",
            unknown_callback="some.module.unknown_callback_function",
            unsafe_callback="some.module.unsafe_callback_function",
            test_kwarg="test_value",
        )

        mock_import.assert_called_once_with("some.module.safe_callback_function")
        mock_unsafe_callback.assert_called_once_with(
            safe_file,
            test_kwarg="test_value",
        )


@pytest.mark.parametrize(
    "unknown_callback_return_value",
    [None, True, False],
)
def test_malware_detection_callback_unknown_status(safe_file, unknown_callback_return_value):
    """Test malware detection callback with unknown status."""
    mock_unsafe_callback = Mock()
    mock_unknown_callback = Mock(return_value=unknown_callback_return_value)

    with patch("core.file_upload.malware_detection.import_string") as mock_import:
        mock_import.side_effect = lambda path: {
            "some.module.unknown_callback_function": mock_unknown_callback,
            "some.module.unsafe_callback_function": mock_unsafe_callback,
        }[path]

        error_info = {"error": "test", "error_code": 4001}

        malware_detection_callback(
            safe_file,
            ReportStatus.UNKNOWN,
            error_info=error_info,
            safe_callback="some.module.safe_callback_function",
            unknown_callback="some.module.unknown_callback_function",
            unsafe_callback="some.module.unsafe_callback_function",
            test_kwarg="test_value",
        )

        # Verify unknown_callback was called with correct arguments
        mock_import.assert_any_call("some.module.unknown_callback_function")
        mock_unknown_callback.assert_called_once_with(
            safe_file,
            error_info,
            test_kwarg="test_value",
        )

        if not unknown_callback_return_value:
            # If unknown_callback returned False (or None), unsafe_callback should be called
            mock_import.assert_any_call("some.module.unsafe_callback_function")
            mock_unsafe_callback.assert_called_once_with(
                safe_file,
                error_info,
                test_kwarg="test_value",
            )
        else:
            mock_unsafe_callback.assert_not_called()


def test_malware_detection_callback_unsafe_status(unsafe_file):
    """Test malware detection callback with unsafe status."""
    mock_unsafe_callback = Mock()

    with patch("core.file_upload.malware_detection.import_string") as mock_import:
        mock_import.return_value = mock_unsafe_callback

        error_info = {"error": "test", "error_code": 4001}

        malware_detection_callback(
            unsafe_file,
            ReportStatus.UNSAFE,
            error_info=error_info,
            safe_callback="some.module.safe_callback_function",
            unknown_callback="some.module.unknown_callback_function",
            unsafe_callback="some.module.unsafe_callback_function",
            test_kwarg="test_value",
        )

        # Verify unsafe_callback was called with correct arguments
        mock_import.assert_called_once_with("some.module.unsafe_callback_function")
        mock_unsafe_callback.assert_called_once_with(
            unsafe_file,
            error_info,
            test_kwarg="test_value",
        )
